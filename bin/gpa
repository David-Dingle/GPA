#!/bin/bash

usage() {
  cat <<EOF
Usage:
    gpa [profiling options] [executable] [executable options]
    profiling options:
    -j <cpu-threads>
    number of analysis threads
    -inst
    instrumentation based profiling
    -h help
    -arch <gpu-arch>
    default: V100 
    -v output logs in gpa.log
    -env <conda_env name>
EOF
  exit 0
}

while test "x$1" != x
do
  arg="$1" ; shift
  case "$arg" in
    -v)
      export GPA_VERBOSE=1
      ;;
    -j)
      export GPA_THREADS=$1
      shift
      ;;
    -h)
      usage
      exit
      ;;
    -inst)
      export GPA_INST=1
      ;;
    -arch)
      export GPA_ARCH=$1
      shift
      ;;
    -env)
      export CONDA_ENV=$1
      shift
      ;;
    * )
      set -- "$arg" "$@"
      break
      ;;
  esac
done

GPA_EXEC=$1
GPA_ARGS="${@:2}"

if [ -z "$GPA_EXEC" ]; then
  echo "Empty executable"
  exit
fi

if [ -z "$GPA_THREADS" ]
then
  export GPA_THREADS=1
fi

if [ -z "$GPA_ARCH" ]
then
  export GPA_ARCH=V100
fi

if [ ! -z "$GPA_VERBOSE" ]; then
  export GPA_REDIRECT=./gpa.log
else
  export GPA_REDIRECT=/dev/null
fi

if [ -z "$CONDA_ENV" ]
then
  echo "Empty conda env"
  exit
fi

MEASUREMENTS=gpa-measurements
DATABASE=gpa-database
export USER_NAME=$(whoami) 
echo "Make sure "$MEASUREMENTS" and "$DATABASE" is clean"
rm -rf $MEASUREMENTS
rm -rf $DATABASE

echo "Profiling: collect pc sampling performance metrics"
# Fix PC sampling error: export CUPTI libs
export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64/:$LD_LIBRARY_PATH 
export LD_LIBRARY_PATH=/home/xjding/Projects/GPA/GPA/gpa/torch-monitor/usr/local/lib/:$LD_LIBRARY_PATH

export LD_LIBRARY_PATH=/home/${USER_NAME}/anaconda3/envs/${CONDA_ENV}/lib/:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/home/${USER_NAME}/anaconda3/envs/${CONDA_ENV}/lib/python3.11/site-packages/torch/lib:$LD_LIBRARY_PATH

# time hpcrun -e gpu=nvidia,pc -o $MEASUREMENTS $GPA_EXEC $GPA_ARGS &>$GPA_REDIRECT
time hpcrun -e gpu=nvidia,pc -o $MEASUREMENTS python $GPA_EXEC $GPA_ARGS &>$GPA_REDIRECT


if [ ! -z "$GPA_INST" ]
then
  echo "Profiling: collect instrumentation-based performance metrics"
  # time hpcrun -e gpu=nvidia,inst -o $MEASUREMENTS $GPA_EXEC $GPA_ARGS &>>$GPA_REDIRECT
  # time hpcrun -e gpu=nvidia,inst_branch -o $MEASUREMENTS $GPA_EXEC $GPA_ARGS &>>$GPA_REDIRECT
  # time hpcrun -e gpu=nvidia,inst_global -o $MEASUREMENTS $GPA_EXEC $GPA_ARGS &>>$GPA_REDIRECT
  # time hpcrun -e gpu=nvidia,inst_shared -o $MEASUREMENTS $GPA_EXEC $GPA_ARGS &>>$GPA_REDIRECT
  time hpcrun -e gpu=nvidia,inst -o $MEASUREMENTS python $GPA_EXEC $GPA_ARGS &>>$GPA_REDIRECT
  time hpcrun -e gpu=nvidia,inst_branch -o $MEASUREMENTS python $GPA_EXEC $GPA_ARGS &>>$GPA_REDIRECT
  time hpcrun -e gpu=nvidia,inst_global -o $MEASUREMENTS python $GPA_EXEC $GPA_ARGS &>>$GPA_REDIRECT
  time hpcrun -e gpu=nvidia,inst_shared -o $MEASUREMENTS python $GPA_EXEC $GPA_ARGS &>>$GPA_REDIRECT
fi

echo "Parsing: parse CPU and GPU binaries"
time hpcstruct --gpucfg yes -j $GPA_THREADS $MEASUREMENTS &>>$GPA_REDIRECT
cd $MEASUREMENTS/structs
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/bin/python3.11 &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/Projects/GPA/GPA/gpa/hpctoolkit/lib/hpctoolkit/libhpcrun.so.0.0.0 &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/Projects/GPA/GPA/gpa/hpctoolkit/lib/hpctoolkit/ext-libs/libmonitor.so.0.0.0 &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/libgomp.so.1.0.0 &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /usr/lib/x86_64-linux-gnu/libcuda.so.1 &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /usr/local/cuda-12.4/extras/CUPTI/lib64/libcupti.so &>> $GPA_REDIRECT

  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/libcublas.so.12.1.0.26 &>> $GPA_REDIRECT
  # hpcstruct -j $GPA_THREADS /usr/local/cuda-12.4/targets/x86_64-linux/lib/libcublas.so.12.1.0.26 &>> $GPA_REDIRECT

  # hpcstruct -j $GPA_THREADS /usr/local/cuda-12.4/targets/x86_64-linux/lib/libcublasLt.so.12.1.0.26 &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/libcublasLt.so.12.1.0.26 &>> $GPA_REDIRECT

  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/libcudart.so.12.1.105 &>> $GPA_REDIRECT
  # hpcstruct -j $GPA_THREADS /usr/local/cuda-12.4/targets/x86_64-linux/lib/libcudart.so &>> $GPA_REDIRECT
  
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/python3.11/site-packages/torch/lib/libtorch_python.so &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/python3.11/site-packages/torch/lib/libtorch_cuda.so &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/python3.11/site-packages/torch/lib/libc10_cuda.so &>> $GPA_REDIRECT
  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/libomp.so &>> $GPA_REDIRECT

  hpcstruct -j $GPA_THREADS /usr/local/cuda-12.4/targets/x86_64-linux/lib/libcudnn.so.9.7.0 &>> $GPA_REDIRECT

  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/python3.11/site-packages/torch/lib/libcudnn_graph.so.9 &>> $GPA_REDIRECT
  # hpcstruct -j $GPA_THREADS /usr/local/cuda-12.4/targets/x86_64-linux/lib/libcudnn_graph.so.9.7.0 &>> $GPA_REDIRECT

  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/python3.11/site-packages/torch/lib/libcudnn_engines_precompiled.so.9 &>> $GPA_REDIRECT
  # hpcstruct -j $GPA_THREADS /usr/local/cuda-12.4/targets/x86_64-linux/lib/libcudnn_engines_precompiled.so.9.7.0 &>> $GPA_REDIRECT

  hpcstruct -j $GPA_THREADS /home/$USER_NAME/anaconda3/envs/$CONDA_ENV/lib/python3.11/site-packages/torch/lib/libtorch_cpu.so &>>$GPA_REDIRECT

  for fullfile in ./*
  do
    filename=$(basename -- "$fullfile")
    extension="${filename##*.}"
    filename="${filename%.*}"
    if [ $extension = "warnings" ]
      then 
        echo "$fullfile is found." &>> $GPA_REDIRECT
        rm $filename.hpcstruct
    fi
  done

cd ../..
# time hpcstruct -j $GPA_THREADS $GPA_EXEC -o $GPA_EXEC".hpcstruct" &>>$GPA_REDIRECT

echo "Analyzing: match metrics with advice"
# hpcprof --gpu-arch $GPA_ARCH -S $GPA_EXEC".hpcstruct" -o $DATABASE $MEASUREMENTS &>>$GPA_REDIRECT


# time hpcprof --gpu-arch $GPA_ARCH -S $GPA_EXEC".hpcstruct" -o $DATABASE $MEASUREMENTS &>>$GPA_REDIRECT
time hpcprof --gpu-arch $GPA_ARCH -o $DATABASE $MEASUREMENTS &>>$GPA_REDIRECT

echo "Output advice in "$DATABASE"/gpa.advice"

echo "Done..."
